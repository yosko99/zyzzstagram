generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                    String         @id @default(uuid())
    username              String         @unique
    email                 String         @unique
    imageURL              String
    description           String?
    password              String
    posts                 Post[]
    comments              Comment[]
    likedPosts            Post[]         @relation("PostLikes")
    savedPosts            Post[]         @relation("SavedPosts")
    likedComments         Comment[]      @relation("CommentLikes")
    followers             User[]         @relation("UserFollowers")
    following             User[]         @relation("UserFollowers")
    stories               Story[]
    createdAt             DateTime       @default(now())
    updatedAt             DateTime       @default(now()) @updatedAt
    sentNotifications     Notification[] @relation("NotificationSenders")
    receivedNotifications Notification[] @relation("NotificationRecievers")
}

model Post {
    id           String         @id @default(uuid())
    imageURL     String
    description  String?
    published    Boolean        @default(false)
    author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId     String
    likedBy      User[]         @relation("PostLikes")
    comments     Comment[]
    savedBy      User[]         @relation("SavedPosts")
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @default(now()) @updatedAt
    Notification Notification[]
}

model Comment {
    id           String         @id @default(uuid())
    content      String
    author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId     String
    post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId       String
    likedBy      User[]         @relation("CommentLikes")
    createdAt    DateTime       @default(now())
    Notification Notification[]
}

model Story {
    id        String   @id @default(uuid())
    imageURL  String
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
}

model Notification {
    id         String   @id @default(uuid())
    message    String
    read       Boolean  @default(false)
    createdAt  DateTime @default(now())
    sender     User     @relation("NotificationSenders", fields: [senderId], references: [id], onDelete: Cascade)
    senderId   String
    receiver   User     @relation("NotificationRecievers", fields: [receiverId], references: [id], onDelete: Cascade)
    receiverId String
    post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId     String?
    comment    Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId  String?
}
